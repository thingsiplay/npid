#!/bin/env bash

show_version () {
cat << EOF
npid v0.2
EOF
}

show_usage () {
    local pname
    pname="${0##*/}"

cat << EOF
usage:
  ${pname} [-h] [-p] [-c] [--] [POPT ...] [PID ...] [NAME ...]
EOF
}

show_help () {
    local pname
    local usage
    pname="${0##*/}"
    usage=$(show_usage)

cat << EOF
${usage}

${pname} - Get name of process by pid

positional arguments:
  PID           process ID to search for, defaults to current shell process
  NAME          name of process to search for, uses pidof to determine PID
  POPT          positional options to hand over to pidof when using NAME

options:
  -h            print this help and exit
  -p            include pid next to each name of output
  -c            include commandline after each name of output
  --            stop parsing script options, interpret after as positionals

examples:
  ${pname}
  ${pname} \$PPID
  ${pname} 2 40
  ${pname} -p -c python
  ${pname} -- -s python

error code:
  0             success: all requested parts are found
  *             error: pid or name could not be resolved or any other error

Copyright Â© 2023 Tuncay D. <https://github.com/thingsiplay/npid>'
EOF
}

unset -v opt_include_pid
unset -v opt_include_cmdline
unset -v pidof_options
unset -v pidof_names

opt_include_pid=false
opt_include_cmdline=false
pidof_options=()
pidof_names=()

OPTIND=1
while getopts 'hpc' OPTION
do
    case "${OPTION}" in
        h)
            show_help
            exit 0
            ;;
        p)
            opt_include_pid=true
            ;;
        c)
            opt_include_cmdline=true
            ;;
        *)
            show_usage >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"

if [[ ${#} -eq 0  ]]
then
    argv=( "${$}" )
else
    argv=( "${@}" )
fi

find_name () {
    local pid=''
    local output=''
    local cmdline=''

    for pid in "${@}"
    do
        if output="$(cat -- "/proc/${pid}/comm" 2>/dev/null)"
        then
            if [[ "${opt_include_pid}" = 'true' ]]
            then
                output="${pid} ${output}"
            fi

            if [ "${opt_include_cmdline}" = 'true' ]
            then
                if cmdline=$(strings -s " " "/proc/${pid}/cmdline" 2>/dev/null)
                then
                    output="${output}: ${cmdline}"
                else
                    exit ${?}
                fi
            fi

            printf '%s\n' "${output}"
        else
            exit ${?}
        fi
    done
}

for query in "${argv[@]}"
do
    if [[ "${query}" =~ ^[0-9]+$ ]]
    then
        find_name "${query}"
    else
        if [[ "${query}" = '--' ]]
        then
            continue
        elif [[ "${query}" =~ ^- ]]
        then
            pidof_options=( "${pidof_options[@]}" "${query}" )
            continue
        else
            pidof_names=( $(pidof "${pidof_options[@]}" "${query}") )
            if [[ "${pidof_names[0]}" = '' ]]
            then
                exit 1
            else
                find_name "${pidof_names[@]}"
            fi
        fi
    fi
done

exit 0
